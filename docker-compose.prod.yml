version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: dnd_postgres_prod
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dnd_prod_network
    restart: unless-stopped

  hasura:
    image: hasura/graphql-engine:v2.36.0
    container_name: dnd_hasura_prod
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_METADATA_DIR: /hasura-metadata
    volumes:
      - ./hasura/metadata:/hasura-metadata
    networks:
      - dnd_prod_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dnd_backend_prod
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PORT: 3001
      RUST_LOG: info
    networks:
      - dnd_prod_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dnd_frontend_prod
    ports:
      - "3000:3000"
    depends_on:
      - hasura
      - backend
    environment:
      NEXT_PUBLIC_GRAPHQL_URL: ${NEXT_PUBLIC_GRAPHQL_URL}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    networks:
      - dnd_prod_network
    restart: unless-stopped

volumes:
  postgres_prod_data:

networks:
  dnd_prod_network:
    driver: bridge